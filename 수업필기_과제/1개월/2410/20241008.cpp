#include <iostream>

// 배열 [배열] 배열 배열 배열 배열

using namespace std;

int main()
{
	// **** 배열은 상수 포인터(int * const p)에 가깝다 리터럴 상수다 R-Value다 !!! ****
	// 증감연산자는 상수에게 사용할 수 없으니까 배열이름에 증감연산자 사용 불가능..

	// 포인터와 배열이 다르다고 한 이유 위의 이유
	// 대신 포인터 변수는 L-Value니까 
	// 배열의 첫번째 주소(그냥 배열)를 포인터변수에 대입해서 포인터연산으로 접근할 수 있다
	// 으아!! 속이 시원 ㅋ 

	// 메모리에 직접 접근 = 랜덤엑세스(임의접근)
	// 우리는 포인터 연산으로 계산해서 들어가는 것 같지만 컴퓨터 입장에서는 주소지에 직진해서 들어가는 것과 같다...


	// 배열의 특징
	// 1. 배열의 이름은 배열 전체의 첫 번째 주소이다. (iArray = &iArray[0])
	// 2. 배열은 연속된 메모리 공간에 할당된다.

	// 3. 배열을 선언할 때 []연산자 안에는 반드시 상수가 기입되어야 한다.!!
	// 	  = 개수를 정해놓고 사용하기 때문(정적할당도 그렇지만 malloc을 해도 만들어진 배열이 해제되지 않은 채 늘어나거나 줄어나는 일은 없다..)
	
	// 4. [] 안에 개수를 넣지 않고 생성 시 초기화 값의 개수만큼 배열이 자동 생성된다
	// 5. sizeof 연산자에 배열의 이름을 기입할 경우 배열 전체의 메모리 크기를 계산할 수 있다
	// 	  tmi) 모-던 cpp 이후 배열의 개수를 구해주는 size(iArr);라는 함수가 추가됐음
	// 	  소감) int형 배열 개수 아는 법 뭐가 있을지 항상 궁금했는데 이런 멋진 일이.. 내가너무바보갓음..
	// 6. 생성된 배열의 []연산자 안에는 변수를 사용할 수 있음. (cout << iArr[i++];)
	// 7. 배열의 원소끼리 연산이 가능하다.. 당연함
	// 8. 배열의 []연산자 내에서도 연산이 가능하다.. 당연함 6번과 일맥상통
	// 9. 배열은 초기화 값이 없을 경우 자동으로 0 초기화된다.
	// 	  초기화 시 중괄호{} : 블록 단위 데이터 초기화 방식이다
	// 	  중괄호 안쓰고 배열만 선언할 경우엔 당연히 0 초기화 안된다. 9번의 연장선...(질문함...궁금해서)
	// 10?.배열의 []연산자는 포인터 연산을 하는 것 처럼 받아들이면 될 것 같다..
	// 	  iArray[1] = *(iArray + 1)



	// 이차원배열
	// iArray[2][3]일 때
	// iArray[0] = *iArray
	// 그러나 iArray는 이중포인터가 아니다
	// 이차원배열의이름을저장하는변수가따로잇다.
	// 그건 바로 포인터를 담은 포인터배열..
	// 생각해보면 이차원배열은 사실상 더블포인터와 같다 처럼 말하면서 대괄호 한쌍씩 별표로 바꾸는 짓 많이 했는데
	// 뭐 굳이 따지면 다르긴한데 그니까 그치만 근데 아무튼다른건데...다른거다
	// 다른게 중요한게 아니라 배열 내의 값을 참조할 때는 더블포인터가 상관 없지만
	// 이중포인터의 이름. 을 담는 주소는 누가 담냔 말이야 <- 이게 문제겠지


	return 0;

	// 숙
	// 1. 2중 for문과 배열을 이용하여 다음처럼 숫자를 출력하라
	/*
	1	2	3	4	5
	6	7	8	9	10
	11	12	13	14	15
	16	17	18	19	20
	21	22	23	24	24
	*/

	// 2. 로또 만들기
	// - 1~45 사이 중 6개의 숫자를 5회 출력하기
	// - 같은 회차(한 줄)에서 중복된 숫자는 존재할 수 없음
	// - 출력된 숫자는 오름차순으로 정렬(버블 소트)(하-드모드)
	/*
	1	2	3	4	5	6
	2	4	6	7	9	10
	1	2	3	4	5	6
	1	2	3	4	5	6
	2	4	6	7	9	10
	1	2	3	4	5	6
	귀찮아서복붙함
	*/

	// 3. 야구 게임 만들기
	// - 1~9까지 무작위 수 3개 추출(단, 한번만) 하고 출력(매 회 마다)
	// - 정렬은 X
	// - 숫자 세 개를 입력하여 입력한 수와, 무작위 수의 값과 자리가 일치하면 스트라이크
	// - 값만 일치하면 볼이 증가
	// - 매 회 몇 스트라이크 몇 볼인지 출력
	// - 3스트라이크일 경우 '승리' 출력 후 종료
	// - 9라운드까지 진행할 때, 3 스트라이크를 만들지 못하면 '패배' 출력 후 종료


	// 배열 숙제 확인한다고 함(저번에도한다매)
}
