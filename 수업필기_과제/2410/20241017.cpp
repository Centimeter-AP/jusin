#include <iostream>


// crtdbg함수(누수좀잡아라)
// 수업 코드 참조 (메모리 누수 확인용 매크로 올리심(vscode))

// 어제 하던 파일 입출력 + 전처리기 문법

// 전처리기		#전처리기지시자
// 1. 매크로 문법
// 상수 매크로 : "단순 치환"이기 때문에 빠르나 진짜 치환일 뿐이라서 사용 전에 문제가 있는지 잘 몰루
#define		PI	3.14f

// 함수 매크로 : 절대 함수 아닙니다.. 믿어주세요 저는 그냥 매크로화 입니다
// 장점) 자료형에 제한이 없다
// 단점) 연산자 우선 순위를 고려하지 않고 단순 치환만 하기 때문에 니가 열심히 방어해줘야함 ㅜㅜ
#define		SQUARE(X)	X * X			// SQUARE(2 + 2) 를 했을 경우 2 + 2 * 2 + 2 = 8이 됨
#define		SQUARE(Y)	((Y) * (Y))		// 이렇게 써야 원했던 4 * 4를 수행함

#define		PLUS(X)		X\
+ X										// '\'역슬러시로 개행을 표시할 수 있으나 그 뒤에 무조건 띄쓰 x
										// 근데웬만하면 한줄짜리로 좀 합시다
// 함수 매크로의 다양한 문법....
// 1) 특정 항목을 문자열로 치환시키는 문법
#define		STRING(A)		#A "입니다."	  // 이렇게 쓰면 밑에서 자료형 표시 안해도 문자열로 받음
// 2) 매크로 인자의 결합
#define		COMBINE(A, B)	A##B			// 이렇게 쓰면 10, 20을 받았을 때 1020으로 이해함

// 좋은 사용 예시
#define		SAFE_DELETE(P)	if(p){delete p; p = nullptr};
											// 어쨌든 이게 다 "단순치환"이라는 것을 생각하면 된다

// 2. 조건부 컴파일
// #if		if문과 동일한 형태
// #elif	else if 
// #else	else
// #endif	조건부 컴파일 구문의 끝을 알리는 문법 (꼭 필요!!)

// #ifdef	전처리기 정의 여부에 따라서 컴파일 수행
// #ifndef	전처리기가 정의 되어 있지 않다면 컴파일 수행 

using namespace std;

int main()
{
	

	/************파일 입출력************/
	//* 파일 입출력의 순서
	// 1. 파일 개방(스트림 생성)
	// 2. 입출력 함수 호출
	// 3. 파일 소멸(생성한 스트림 생성)

	//* 파일 경로의 종류
	// 절대 경로: 드라이브 명부터 현재 파일까지 좌라락 쓴거
	// D:/Users/Admin/Jusin/...
	// 상대 경로: 프로젝트 파일 위치 기준으로 표시한 경로
	// ./ (현재 위치), ../ (상위 폴더 위치)

	// 파일 개방 함수: 스트림 생성 함수

	// 리눅스의 File Descriptor FD = 윈도우의 Handle 핸들
	// 윈도우는 파일 핸들과 소켓 핸들이 나뉘어있다고 한다?
	// 핸들 = 운영체제가 프로그램을 식별하기 위해 부여하는 번호

	// 리소스 - 프로세스, 쓰레드, 파일.

	///////// 여기까지전날기록 /////////

	// c언어 파일 개방 함수
	// fopen_s(FILE** stream, const char *filename, const char *mode);
	// 		  (개방한 스트림을 저장할 포인터의 주소, 파일 이름 포함한 파일 경로, 파일 오픈 모드)
	// fopen(const char *filename, const char *mode);

	// 파일 모드: r	(읽기전용), w (쓰기전용), a (이어 쓰기) / +t (텍스트 모드), +b (바이너리 모드)
	// ex) rt(텍스트모드로 읽기전용), ab(바이너리 모드로 이어 쓰기)...

	// c언어 파일 소멸 함수
	// fclose(FILE *stream);
	// 		 (닫을 스트림)

	// c언어 파일 읽기 쓰기.. 열린 스트림을 stdout대신 쓰면 된다 

	// c언어 파일 함수 : 파일 입출력 시 지원되는 함수
	// fseek: 파일의 커서를 원하는 위치로 이동시키는 함수
	// ftell: 커서의 위치를 알려주는 함수
	// feof : 파일 커서가 eof에 도달했는지 알려주는 함수(eof 아닐 시 0이 아닌 값 리턴)(이라고 했는데 eof일 때 0아닌값인데?)




	//////////////////// 여기까지 텍스트 모드 ////////////////////
	// 여기부터 바이너리 월드인가봅니다

	// fread, fwrite – binary stream input/output
	// fwrite (저장할 메모리의 주소,		  	저장할 메모리의 크기, 	저장할 메모리의 개수, 개방한 스트림);
	// fwrite (const void *restrict ptr, 	size_t size, 	  size_t nitems,   FILE *restrict stream);
	// 예시는 수업 자료 보는게 나을듯...

	return 0;
}

// 1. textRPG에 저장하기 불러오기 구현
// 	- 불러오기는 직업 선택할 때
// 	- 저장하기는 내가 넣고 싶은 부분에서

// 2. 받은 이미지 파일을 파일 입출력 함수들을 이용해 복사하기
//	- 당연히 바이너리 모드