#include <iostream>
#include <unistd.h>

// 파일 입출력 (인줄~)
// 콘솔입출력(콘솔)/파일입출력(파일)/소켓입출력(네트워크)

using namespace std;

	// 실패 시 -1(EOF)반환,  대부분의 int 반환 C함수들의 실패상황이 -1
	// EOF : End of File , 파일의 끝을 알려주는 -1
	// 개행문자 \n은 사실 \r (캐리지 리턴)과 같이 있는 것과 같다
	// 캐리지리턴: 커서를 맨 앞으로 땡겨주기
	

int main()
{
	// 입력 스트림, 출력 스트림, "스트림"!
	// 버퍼: 임시저장소

	/************콘솔 입출력************/
	// 텍스트 모드, 바이너리 모드가 있다 (텍스트냐 이진수냐)
	
	// 표준 콘솔 입출력 스트림의 종류
	// stdin, stdout, stderr
	// stdin은 기본 키보드 대상, 나머지는 기본 모니터 대상

	// 문자열 출력 함수.
	// 1. 단일 문자 출력
	// putchar(int);  			// 콘솔 출력에만 가능(stdout)
	// fputc(int, FILE*); 		// 매개 변수에 스트림 종류를 설정함

	// 2. 단일 문자 입력
	// getchar(int);			// 콘솔 입력에만 가능(stdin)
	// fgetc(FILE*);

	// 3. 문자열 출력 함수
	// puts(const char*);			// 콘솔 출력에만 사용 가능, 자동 개행 지원
	// fputs(const char*, FILE*)	// 범용 사용, 자동 개행 지원 x

	// 4. 문자열 입력 함수
	// gets(char *); , gets_s(멍청한리눅스는못하는문법)		// 공백도 입력받을 수 있다 엔터는 안된다
	// fgets(char *, sizeof(char *), FILE*);		 // 설정한 사이즈 만큼까지 읽는다
	
	// 5. 출력 버퍼 비우기 함수
	//    입력 버퍼는 강제로 비울 수가 없다 & 출력 버퍼 강제 비우기도 그닥 자주 하진 않는다
	// fflush(FILE *);
	// while ('\n' != getchar())

	

	/************파일 입출력************/
	//* 파일 입출력의 순서
	// 1. 파일 개방(스트림 생성)
	// 2. 입출력 함수 호출
	// 3. 파일 소멸(생성한 스트림 생성)

	//* 파일 경로의 종류
	// 절대 경로: 드라이브 명부터 현재 파일까지 좌라락 쓴거
	// D:/Users/Admin/Jusin/...
	// 상대 경로: 프로젝트 파일 위치 기준으로 표시한 경로
	// ./ (현재 위치), ../ (상위 폴더 위치)

	// 파일 개방 함수: 스트림 생성 함수

	// 리눅스의 File Descriptor FD = 윈도우의 Handle 핸들
	// 윈도우는 파일 핸들과 소켓 핸들이 나뉘어있다고 한다?
	// 핸들 = 운영체제가 프로그램을 식별하기 위해 부여하는 번호

	// 리소스 - 프로세스, 쓰레드, 파일.


	return 0;
}


// textrpg 숙제풀이로 받은거 동적할당으로 변경해보기