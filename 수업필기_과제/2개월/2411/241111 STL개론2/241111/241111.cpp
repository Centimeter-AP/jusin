#include "pch.h"

// deque, forward_list, array는 그냥 저번주거에 합쳤음

//- 표준 연관 컨테이너 : 방향성을 가지지 않는 (트리의 느낌) 컨테이너 비선형적 컨테이너
//	자동정렬하는 : set, multiset, map, multimap
//	정렬하지않는 : unordered_set, unordered_multiset, unordered_map, unordered_multimap


// 트리 구조(으)

// 계층 구조로 자료를 저장하는 방식
// 자식은 여럿일 수 있으나 부모가 여럿일 수는 없음
// 너 부모 여러명이냐
// 탐색에 특화되어있음. 부모가 자식을 구분짓는 기준이 된다?

// 노드와 노드를 연결짓는 선 : 간선 (edge)
//		부모와 자식을 구분함
//		N개의 노드가 있다면 간선은 무조건 N-1개가 됨. 
// 루트 노드 : 최상위 노드(트리의 형태는 나무를 뒤집어 둔 모양이기 때문에 맨 위가 루트(뿌리)임 (root node) (vertex)
// 리프 노드 : 단말 노드, 자식 노드가 없는 마지막 노드 (leaf node)
// 내부 노드 : leaf가 아닌 노드. 자식 노드가 하나라도 있는 노드(internal node)
// 형제 노드 : 같은 부모 노드를 가진 노드 (sibling node)
// 선조 노드 : 부모의부모의부모의부모부모부모부모 노드들?(잘 안 쓰는 표현)(안중요함)
// 차수 (degree) : 한 노드가 가지는 자식 노드의 개수 (1촌자식 이상 자손도 포함)
// 레벨 : 루트 노드로부터 멀리 떨어져 있는 거리, 루트 노드가 0 레벨에 해당(하는거로합시다)
// 높이 : 레벨의 최대값. 루트 노드로부터 가장 먼 거리에 있는 자식 노드의 높이에 1을 더한 값
// 서브 트리 : 자식이 자식을 가질 때 그거도 트리기 때문에 서브 트리로 부름

// 이진 트리 : 모든 차수가 2 이하인 트리. 모든 노드가 두개의 서브 트리를 가지고 있는 트리. 모든 노드가 자식을 2개 이하로 가진 트리.
// - 정 이진 트리 : 모든 노드가 0 또는 2개의 자식 노드를 가지는 트리. 1개같은건 용납할 수 없음
// - 포화 이진 트리 : 모든 레벨의 노드가 꽉 차 있는 이진 트리. 2개2개2개!!
// - 완전 이진 트리 : 마지막 레벨을 제외한 모든 레벨의 노드가 완전히 채워져 있거나 마지막 레벨에는 노드가 왼쪽부터 채워져 있는 트리
// - 균형 이진 트리 : 모든 노드의 서브 트리 간의 높이 차이가 1 이하인 트리 
// - 편향 트리 : 리프 노드를 제외한 모든 노드가 하나의 자식 노드만 가지는 트리 (탐색 좋자고 트리 썼더니만 일직선인 똥트리라 알고리즘적으로 좋지않음)

// 트리 순회 : 정해진 순서에 의해 트리의 모든 노드를 방문하는 작업
// - 전위 순회 : V - L - R (루트 - 좌 - 우)
// - 중위 순회 : L - V - R
// - 후위 순회 : L - R - V
// - 층별 순회(레벨 순회) : 레벨 0 부터  순서대로, 동 레벨 대에서는 왼쪽 부터

// 이진 탐색 트리...
// 임의 노드를 기준으로 좌측은 자신보다 작은 값, 우측은 자신보다 큰 값을 가지게 됨
// 레드 블랙 트리 (검색해서보세요)
// 뭔가 넣을 때 마다 자동정렬을 한다(삽입삭제 하고 트리를 다시 재정렬함)
// map, multi map, set, multi set

// map
// 원소에 주소를 저장할 공간이 두개 (이진트리니까 자식 둘을 연결할 용도)
// 또한 key와 value로 구분해 원소를 두개 가짐.
// 정렬은 key 값을 기준으로 함. value는 실질 데이터라서 정렬과 연관이 없음
// 정렬을 하고 나면 사람이 인지하는 트리의 구조와 관련없이 key값을 기준으로 탐색할 수 있게 함.
// key값은 중복될 수 없음(multi map의 경우 key가 중복이 됨)
// 노드 기반 컨테이너들 중 유일하게 key값으로 임의접근이 가능하다; unordered_map도 됨 multi_map은 중복key때문에 안됨
// 리소스 탐색용으로 많이 쓰인다.

// set
// map에서 value가 빠지고 key값만 들어가있는 상태
// unordered가 없음.








int main()
{


}

