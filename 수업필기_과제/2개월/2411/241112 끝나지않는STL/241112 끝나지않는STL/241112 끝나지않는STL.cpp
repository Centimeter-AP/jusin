#include "pch.h"
#include <algorithm>


// 해시(hash)
// 키값으로 검색은 하고싶은데 배열로 랜덤엑세스까지 하고싶어 !!
// 해싱 : 각각의 데이터를 (가급적)숫자로 표현하고 그 키값으로 찾거나 넣는 일?
// 해시 함수 : 고정된 범위의 정수로 매핑하기 위해 사용, 해싱의 산술 연산을 해싱함수라고 함?
// 키 : 해시 함수의 입력하는 값. 입력 데이터 자체 혹은 데이터를 구분하는 값.
// 해시 값 : 해시 함수를 통해 발생한 출력 값. 해시코드나 해시라고도 부름
// 해시 테이블 : 해시 함수에 의해 계산된 값을 저장하는 자료구조. 일반적으로 배열이 선호됨(랜덤엑세스를위함?)
// 키, 해시 값(value), 해시 테이블을 모두 칭해 해시 맵이라고도 함(value가 없다면 해시 셋)

// 버킷 : 버킷, 슬롯, 셀 등이라고 불림. 해시테이블에 저장되는 각각의 노드, 실제 자료를 저장해둔 메모리 공간

// 해시 충돌 : 해시함수 이후 나온 해시값이 같은 테이블에 저장되는 중복되는 상황
// 체이닝 : 해시 테이블의 구조를 변경해 각 버킷에 하나 이상의 키 값이 저장될 수 있도록 하는 방법
//			해시 테이블의 특정 위치에 연결리스트를 박아버리기 (그 노드만 연결리스트는 아니고 바꾼다면 모든 테이블을 LL로 전환)
//			unordered들이 이 기반으로 만들어져있음

// 해시는 트리에 비해 비슷비슷한 문자열이 많은 자료를 처리할 때에 굉장히 손해를 보게 된다..
// 일단 문자열을 정수로 치환하는 것도 해야하고..
// 비슷한문자들이많음 = 많은 인덱스들 중 한 곳에 포화 현상이 있다 = 비효율적


int main()
{
	return 0;
}

