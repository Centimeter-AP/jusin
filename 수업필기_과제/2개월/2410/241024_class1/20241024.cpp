#include "pch.h"

// 본격적인 C++ 시작 오리엔테이션 (객체지향?)

// 다른 얘기: 함수는 하나의 기능만 담당하도록 분리하는걸 지향하자
//			Q)그럼 함수가 너무 많지 않나요?  A) 네 그래도 분리하세요 그게맞음

class Obj
{
private:					// 멤버변수는 보통 private로(은닉)
	int m_iA;				// 클래스 내에서 전역적으로 사용이 가능함.(동적할당 안 하면 Data영역에 들어간다)
public:
	Obj();
	~Obj();
	void	Render();		// 멤버함수는 보통 public으로(은닉하면 어떻게 쓰실건가요??)
	void	Get_A(int _iA);	// "보통" 이라고 말한 만큼 항상 그렇다는 뜻은 아님. 때에 따라 알아서 판단할 수 있는 능력!
};					

void	Obj::Get_A(int _iA)
{
	m_iA = _iA;
}

void	Obj::Render()
{
	cout << "hello world" << endl;
}



int main()
{
	// 절차 지향 프로그래밍: 함수들이 각자 자신들의 기능을 절차에 의해 호출하는 형식
	//					동사 '~하다' 중심에 프로그래밍 ...?
	// 객체 지향 프로그래밍: 프로그래밍을 구성하는 각 객체 간의 의사소통 형식
	//					주어 '객체' 에 중점을 둔 프로그래밍

	// 객체: 나는 주체, 나를 제외한 것은 다 객체
	//      실 세계를 구성하는 하나의 실체
	//		데이터(멤버변수) + 기능(멤버함수)의 집합
	// 추상화: 공통적인 요소를 추출하는 과정 또는 작업
	//		  추상화를 통해 객체를 만든다(데이터와 기능의 집합으로 만든다)

	// C++은 OOP임과 동시에 일반화 프로그래밍(Generic Programming)이다
	//     class, STL
	// 클래스(객체) = 멤버 변수와 멤버 함수를 모두 소유하는 것(그래서 c++의 구조체도 객체라고 봄)
	// 객체를 실제로 생성할 때 나오는 것이 인스턴스
	// 클래스, 객체, 인스턴스가 동일한 것 처럼 말하게 될 수 있는데
	// 굳이 따지면 그냥 클래스 라고만 부르는 것은 자료형 만을 의미하고
	// 그 자료형으로 함수 내에 실제 선언하게 되면 나오는 것이 인스턴스
	// 그리고 그걸 전부 객체라고 불러버리는 개발자새끼(그러나 알아서 상황에 따라 다르게 이해하시오)

	// 클래스의 속성 => 은닉화, 캡슐화, 상속성, 다형성
	//               정확히 말하면 이 4개가 객체를 "추상화" 하는데 필요한 요소임.
	// 다형성을 쓰기위해 상속성을, 상속성을 쓰기 위해 캡슐화를... 결론적으론 은닉화를 할 줄 알아야 다 쓸 수 있다


	// 은닉화: 데이터를 보호하기 위한 문법. 데이터 접근과 쓰기에 수단을 두자
	// 	1. 접근제어지시자 ppp(public, protected, private)
	//	   이건 구조체에도 사용이 가능하다..
	//	   구조체는 미작성시 public이 기본, 클래스는 미작성시 private가 기본
	//	2. access method를 이용하자
	//	   Getter, Setter
	//	   멤버 변수를 은닉하는 것이 최종 목적이기 때문에 변수가 많아지면 get, set이 늘어나는거도 맞다
	//	   그니까 함수 너무 많?지않?음? 이라고 해도 어쩌라고요 가 된다 그래서 멤버변수 은닉 안하실거냐고요~


	// 객체 생성 과정 (무조건 두 과정이 순서에 맞게 동작해야만 객체가 생성됨!!)
	// 1. 메모리 할당 시 작
	// 2. 생성자 호출

	// 객체 생성시 자동으로 생성되는(딸려오는) 함수들
	// 1. 기본 생성자 (이름())
	// 2. 기본 복사 생성자
	// 3. 기본 대입 연산자
	// 4. 기본 소멸자 (~이름())
	int i(0);


	return 0;
}

// 성적표_최종_진짜_마지막_final 만들기
// 1. 입력 2. 모두 출력 3. 검색 4. 종료
// - 성적표 프로그램을 클래스로 만들고 동적 배열을 구현?하자
//   어라 동적배열... 분명 어제 얘기 하지 않았나요??..
// - 입력을 누르면 몇 명을 입력 받을지 묻고 그 숫자만큼 학생들의 성적 정보를 입력 으윽 뭐지 뭔가 수상할 정도로 익숙한 Phonebook의 기억이
// - 모두 출력을 하면 입력된 데이터 모두를 출력한다
// - 만약 기존의 데이터가 있는 상태에서 또 다시 입력을 선택하면 몇 명을 추가할 지 묻고 새로 입력받은 추가 데이터를 기존의 데이터와 합친다
